# .github/workflows/linux-build.yml
name: Build & Test (ubuntu-22.04)

on: [push, pull_request]

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    steps:
      # 1. Checkout sources ------------------------------------------------------
      - uses: actions/checkout@v4

      # 2. OS-level deps (clang, Mesa, X11, OpenAL …) ----------------------------
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            clang ninja-build cmake build-essential \
            libxmu-dev libxi-dev libxinerama-dev libxrandr-dev \
            libxcursor-dev libudev-dev libopenal-dev unixodbc-dev \
            libgl1-mesa-dev libxxf86vm-dev zlib1g-dev

      # 3. Unpack the zipped engine artefacts ------------------------------------
      - name: Unzip Esenthel / Titan Engine
        run: |
          unzip -q Assets/Engine.zip        -d Assets
          unzip -q Lib/EsenthelEngine.zip   -d Lib

      # 4. Configure + build everything (game + tests) ---------------------------
      - name: Configure (CMake + Ninja)
        env:                      # ← tell CMake which compiler to use
          CC:  clang
          CXX: clang++
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build all targets
        run: cmake --build build --config Release -j$(nproc)

      # 5. Run Google-Tests via CTest --------------------------------------------
      - name: Run unit tests
        working-directory: build
        run: |
          ctest --output-on-failure -C Release        # coloured gtest output shows up in the log
                                                      # and each failing test makes the job red ♥
                                                      # (thanks to gtest_discover_tests)

      # 6. (optional) Upload the game binary artefact ----------------------------
      - name: Upload artefact
        uses: actions/upload-artifact@v4
        with:
          name: BasicAppCmake-linux
          path: build/BasicAppCmake
